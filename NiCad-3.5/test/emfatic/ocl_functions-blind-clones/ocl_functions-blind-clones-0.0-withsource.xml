<clones>
<systeminfo processor="nicad3" system="ocl" granularity="functions-blind" threshold="0%" minlines="1" maxlines="250"/>
<cloneinfo npcs="57" npairs="93"/>
<runinfo ncompares="1540" cputime="2"/>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="10" endline="11" pcid="2">
  class BagType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="25" endline="26" pcid="4">
  class ElementType {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="28" endline="29" pcid="5">
  class InvalidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="46" endline="47" pcid="7">
  class OrderedSetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="49" endline="50" pcid="8">
  class PrimitiveType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="53" endline="54" pcid="9">
  class SequenceType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="57" endline="58" pcid="10">
  class SetType <C, O>  extends CollectionType<C, O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="77" endline="81" pcid="13">
  class TypeType <C, O>  extends utilities.PredefinedType<O> {

    @GenModel(suppressedSetVisibility="true")
    ref C[1] referredType;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="165" endline="167" pcid="23">
  class AssociationClassCallExp <C, P>  extends NavigationCallExp<C, P> {
    ref C referredAssociationClass;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="77" endline="81" pcid="13">
  class TypeType <C, O>  extends utilities.PredefinedType<O> {

    @GenModel(suppressedSetVisibility="true")
    ref C[1] referredType;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="403" endline="405" pcid="51">
  class StateExp <C, S>  extends OCLExpression<C> {
    ref S referredState;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="77" endline="81" pcid="13">
  class TypeType <C, O>  extends utilities.PredefinedType<O> {

    @GenModel(suppressedSetVisibility="true")
    ref C[1] referredType;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="432" endline="434" pcid="55">
  class TypeExp <C>  extends OCLExpression<C> {
    ref C referredType;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="83" endline="84" pcid="14">
  class VoidType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="90" endline="93" pcid="15">
  abstract interface ASTNode {
    transient attr int startPosition = -1;
    transient attr int endPosition = -1;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="95" endline="98" pcid="16">
  abstract interface CallingASTNode extends ASTNode {
    transient attr int propertyStartPosition = -1;
    transient attr int propertyEndPosition = -1;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="90" endline="93" pcid="15">
  abstract interface ASTNode {
    transient attr int startPosition = -1;
    transient attr int endPosition = -1;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="100" endline="103" pcid="17">
  abstract interface TypedASTNode extends ASTNode {
    transient attr int typeStartPosition = -1;
    transient attr int typeEndPosition = -1;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="95" endline="98" pcid="16">
  abstract interface CallingASTNode extends ASTNode {
    transient attr int propertyStartPosition = -1;
    transient attr int propertyEndPosition = -1;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="100" endline="103" pcid="17">
  abstract interface TypedASTNode extends ASTNode {
    transient attr int typeStartPosition = -1;
    transient attr int typeEndPosition = -1;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="6" endline="7" pcid="1">
  class AnyType <O>  extends utilities.PredefinedType<O> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="165" endline="167" pcid="23">
  class AssociationClassCallExp <C, P>  extends NavigationCallExp<C, P> {
    ref C referredAssociationClass;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="403" endline="405" pcid="51">
  class StateExp <C, S>  extends OCLExpression<C> {
    ref S referredState;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="165" endline="167" pcid="23">
  class AssociationClassCallExp <C, P>  extends NavigationCallExp<C, P> {
    ref C referredAssociationClass;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="432" endline="434" pcid="55">
  class TypeExp <C>  extends OCLExpression<C> {
    ref C referredType;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="183" endline="184" pcid="27">
  abstract class OCLExpression <C>  extends utilities.TypedElement<C>, utilities.Visitable, utilities.ASTNode {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="193" endline="194" pcid="29">
  abstract class PrimitiveLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="183" endline="184" pcid="27">
  abstract class OCLExpression <C>  extends utilities.TypedElement<C>, utilities.Visitable, utilities.ASTNode {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="196" endline="197" pcid="30">
  abstract class LiteralExp <C>  extends OCLExpression<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="183" endline="184" pcid="27">
  abstract class OCLExpression <C>  extends utilities.TypedElement<C>, utilities.Visitable, utilities.ASTNode {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="206" endline="207" pcid="32">
  abstract class CollectionLiteralPart <C>  extends utilities.TypedElement<C>, utilities.Visitable {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="183" endline="184" pcid="27">
  abstract class OCLExpression <C>  extends utilities.TypedElement<C>, utilities.Visitable, utilities.ASTNode {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="276" endline="277" pcid="38">
  abstract class NumericLiteralExp <C>  extends PrimitiveLiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="186" endline="191" pcid="28">
  class BooleanLiteralExp <C>  extends PrimitiveLiteralExp<C> {

    @GenModel(documentation="self.type.name = 'Boolean'")
    op boolean boolean_type( ecore.EDiagnosticChain diagnostics, ecore.EMap<EJavaObject, EJavaObject> context);
    attr Boolean booleanSymbol;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="396" endline="401" pcid="50">
  class RealLiteralExp <C>  extends NumericLiteralExp<C> {

    @GenModel(documentation="self.type.name = 'Real'")
    op boolean real_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    attr Double realSymbol;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="186" endline="191" pcid="28">
  class BooleanLiteralExp <C>  extends PrimitiveLiteralExp<C> {

    @GenModel(documentation="self.type.name = 'Boolean'")
    op boolean boolean_type( ecore.EDiagnosticChain diagnostics, ecore.EMap<EJavaObject, EJavaObject> context);
    attr Boolean booleanSymbol;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="407" endline="412" pcid="52">
  class StringLiteralExp <C>  extends PrimitiveLiteralExp<C> {

    @GenModel(documentation="self.type.name = 'String'")
    op boolean string_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    attr String stringSymbol;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="193" endline="194" pcid="29">
  abstract class PrimitiveLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="196" endline="197" pcid="30">
  abstract class LiteralExp <C>  extends OCLExpression<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="193" endline="194" pcid="29">
  abstract class PrimitiveLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="206" endline="207" pcid="32">
  abstract class CollectionLiteralPart <C>  extends utilities.TypedElement<C>, utilities.Visitable {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="193" endline="194" pcid="29">
  abstract class PrimitiveLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="276" endline="277" pcid="38">
  abstract class NumericLiteralExp <C>  extends PrimitiveLiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="196" endline="197" pcid="30">
  abstract class LiteralExp <C>  extends OCLExpression<C> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="206" endline="207" pcid="32">
  abstract class CollectionLiteralPart <C>  extends utilities.TypedElement<C>, utilities.Visitable {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="196" endline="197" pcid="30">
  abstract class LiteralExp <C>  extends OCLExpression<C> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="276" endline="277" pcid="38">
  abstract class NumericLiteralExp <C>  extends PrimitiveLiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="206" endline="207" pcid="32">
  abstract class CollectionLiteralPart <C>  extends utilities.TypedElement<C>, utilities.Visitable {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="276" endline="277" pcid="38">
  abstract class NumericLiteralExp <C>  extends PrimitiveLiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="238" endline="244" pcid="34">
  class CollectionRange <C>  extends CollectionLiteralPart<C> {

    @GenModel(documentation="type = first.type.commonSuperType(last.type)")
    op boolean range_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    val OCLExpression<C>[1] first;
    val OCLExpression<C>[1] last;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="344" endline="350" pcid="45">
  class LetExp <C, PM>  extends OCLExpression<C> {

    @GenModel(documentation="type = in.type")
    op boolean let_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    val OCLExpression<C> in;
    val Variable<C, PM> variable;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="246" endline="251" pcid="35">
  class EnumLiteralExp <C, EL>  extends LiteralExp<C> {

    @GenModel(documentation="self.type = referredEnumLiteral.enumeration")
    op boolean enum_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    ref EL referredEnumLiteral;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="389" endline="394" pcid="49">
  class PropertyCallExp <C, P>  extends NavigationCallExp<C, P> {

    @GenModel(documentation="type = referredProperty.type")
    op boolean property_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    ref P referredProperty;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="246" endline="251" pcid="35">
  class EnumLiteralExp <C, EL>  extends LiteralExp<C> {

    @GenModel(documentation="self.type = referredEnumLiteral.enumeration")
    op boolean enum_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    ref EL referredEnumLiteral;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="439" endline="444" pcid="57">
  class VariableExp <C, PM>  extends OCLExpression<C> {

    @GenModel(documentation="type = referredVariable.type")
    op boolean var_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    ref Variable<C, PM> referredVariable;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="291" endline="292" pcid="40">
  class InvalidLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="321" endline="327" pcid="43">
  class Variable <C, PM>  extends utilities.TypedElement<C>, utilities.Visitable, utilities.TypedASTNode {

    @GenModel(documentation="initExpression->notEmpty() implies initExpression.type.conformsTo (type)")
    op boolean init_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    val OCLExpression<C> initExpression;
    ref PM representedParameter;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="424" endline="430" pcid="54">
  class TupleLiteralPart <C, P>  extends utilities.TypedElement<C>, utilities.Visitable, utilities.TypedASTNode {

    @GenModel(documentation="attribute.type = value.type")
    op boolean value_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    val OCLExpression<C> value;
    ref P attribute;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="374" endline="375" pcid="47">
  class NullLiteralExp <C>  extends LiteralExp<C> {
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="436" endline="437" pcid="56">
  class UnspecifiedValueExp <C>  extends OCLExpression<C>, utilities.TypedASTNode {
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="389" endline="394" pcid="49">
  class PropertyCallExp <C, P>  extends NavigationCallExp<C, P> {

    @GenModel(documentation="type = referredProperty.type")
    op boolean property_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    ref P referredProperty;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="439" endline="444" pcid="57">
  class VariableExp <C, PM>  extends OCLExpression<C> {

    @GenModel(documentation="type = referredVariable.type")
    op boolean var_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    ref Variable<C, PM> referredVariable;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="396" endline="401" pcid="50">
  class RealLiteralExp <C>  extends NumericLiteralExp<C> {

    @GenModel(documentation="self.type.name = 'Real'")
    op boolean real_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    attr Double realSymbol;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="407" endline="412" pcid="52">
  class StringLiteralExp <C>  extends PrimitiveLiteralExp<C> {

    @GenModel(documentation="self.type.name = 'String'")
    op boolean string_type(  ecore.EDiagnosticChain diagnostics,  ecore.EMap<EJavaObject, EJavaObject> context);
    attr String stringSymbol;
  }
</source>
</clone>

<clone nlines="2" similarity="100">
<source file="test/emfatic/ocl/OCL.emf" startline="403" endline="405" pcid="51">
  class StateExp <C, S>  extends OCLExpression<C> {
    ref S referredState;
  }
</source>
<source file="test/emfatic/ocl/OCL.emf" startline="432" endline="434" pcid="55">
  class TypeExp <C>  extends OCLExpression<C> {
    ref C referredType;
  }
</source>
</clone>

</clones>

@namespace(uri="http://www.eclipse.org/ocl/1.1.0/OCLCST", prefix="ocl")
package ocl;

@namespace(uri="http://www.eclipse.org/ocl/1.1.0/OCL/CST", prefix="ocl.cst")
package cst {
  abstract class CSTNode {
    attr int startOffset;
    attr int endOffset;
    !ordered transient attr IToken startToken;
    !ordered transient attr IToken endToken;
    !ordered transient attr EJavaObject ast;
  }

  datatype IToken : lpg.runtime.IToken;

  class PackageDeclarationCS extends CSTNode {
    val PathNameCS pathNameCS;
    val ContextDeclCS[*] contextDecls;
    ref PackageDeclarationCS packageDeclarationCS;
  }

  class PathNameCS extends TypeCS {
    val SimpleNameCS[*] simpleNames;
  }

  abstract class TypeCS extends OCLExpressionCS {
  }

  @ExtendedMetaData(name="OclExpressionCS")
  abstract class OCLExpressionCS extends CSTNode {
  }

  class SimpleNameCS extends OCLExpressionCS {
    attr String value;
    attr SimpleTypeEnum type;
  }

  enum SimpleTypeEnum {
    identifier = 1;
    self = 2;
    Integer = 3;
    String = 4;
    Real = 5;
    Boolean = 6;
    OclAny = 7;
    OclVoid = 8;
    OclInvalid = 9;
    OclMessage = 10;
    keyword = 11;
    UnlimitedNatural = 12;
  }

  abstract class ContextDeclCS extends CSTNode {
  }

  class PropertyContextCS extends ContextDeclCS {
    val PathNameCS pathNameCS;
    val SimpleNameCS simpleNameCS;
    val TypeCS typeCS;
    val InitOrDerValueCS[*] constraints;
  }

  abstract class InitOrDerValueCS extends CSTNode {

    @ExtendedMetaData(name="oclExpressionCS")
    val OCLExpressionCS expressionCS;
  }

  class ClassifierContextDeclCS extends ContextDeclCS {
    val PathNameCS pathNameCS;
    !ordered val InvOrDefCS[*] constraints;
    val SimpleNameCS simpleNameCS;
  }

  abstract class InvOrDefCS extends CSTNode {
    val SimpleNameCS simpleNameCS;
  }

  class OperationContextDeclCS extends ContextDeclCS {
    val OperationCS operationCS;
    val PrePostOrBodyDeclCS[+] prePostOrBodyDecls;
  }

  class OperationCS extends CSTNode {
    val PathNameCS pathNameCS;
    val SimpleNameCS simpleNameCS;
    val VariableCS[*] parameters;
    val TypeCS typeCS;
  }

  class VariableCS extends CSTNode {
    attr String name;
    val TypeCS typeCS;
    val OCLExpressionCS initExpression;
  }

  class PrePostOrBodyDeclCS extends CSTNode {
    attr PrePostOrBodyEnum kind;
    val SimpleNameCS simpleNameCS;

    @ExtendedMetaData(name="oclExpressionCS")
    val OCLExpressionCS expressionCS;
  }

  enum PrePostOrBodyEnum {
    pre = 1;
    post = 2;
    body = 3;
  }

  class DerValueCS extends InitOrDerValueCS {
  }

  class InitValueCS extends InitOrDerValueCS {
  }

  class InvCS extends InvOrDefCS {

    @ExtendedMetaData(name="oclExpressionCS")
    val OCLExpressionCS expressionCS;
  }

  class DefCS extends InvOrDefCS {
    val DefExpressionCS defExpressionCS;
    attr boolean static = false;
  }

  class DefExpressionCS extends CSTNode {
    val OperationCS operationCS;
    val VariableCS variableCS;

    @ExtendedMetaData(name="oclExpressionCS")
    val OCLExpressionCS expressionCS;
  }

  class VariableExpCS extends OCLExpressionCS {
    val OCLExpressionCS[*] arguments;
    val SimpleNameCS simpleNameCS;
    val IsMarkedPreCS isMarkedPreCS;
  }

  class IsMarkedPreCS extends CSTNode {
  }

  class PrimitiveTypeCS extends SimpleNameCS, TypeCS {
  }

  class TupleTypeCS extends TypeCS {
    val VariableCS[+] variables;
  }

  class CollectionTypeCS extends SimpleNameCS, TypeCS {
    attr CollectionTypeIdentifierEnum collectionTypeIdentifier;
    val TypeCS typeCS;
  }

  enum CollectionTypeIdentifierEnum {
    Set = 1;
    Bag = 2;
    Sequence = 3;
    Collection = 4;
    OrderedSet = 5;
  }

  class LetExpCS extends OCLExpressionCS {
    val VariableCS[+] variables;
    val OCLExpressionCS inExpression;
  }

  class IfExpCS extends OCLExpressionCS {
    val OCLExpressionCS[1] thenExpression;
    val OCLExpressionCS[1] elseExpression;
    val OCLExpressionCS[1] condition;
  }

  class MessageExpCS extends OCLExpressionCS {
    val OCLExpressionCS target;
    attr MessageExpKind kind;
    val SimpleNameCS simpleNameCS;
    val OCLMessageArgCS[*] arguments;
  }

  enum MessageExpKind {
    hasSent = 1;
    sent = 2;
  }

  @ExtendedMetaData(name="OclMessageArgCS")
  class OCLMessageArgCS extends CSTNode {
    val TypeCS typeCS;

    @ExtendedMetaData(name="oclExpression")
    val OCLExpressionCS expression;
  }

  abstract class LiteralExpCS extends OCLExpressionCS {
  }

  class CollectionLiteralExpCS extends LiteralExpCS {
    attr CollectionTypeIdentifierEnum collectionType;
    val CollectionLiteralPartCS[*] collectionLiteralParts;
  }

  class CollectionLiteralPartCS extends CSTNode {

    @ExtendedMetaData(name="oclExpressionCS")
    val OCLExpressionCS expressionCS;
  }

  class TupleLiteralExpCS extends LiteralExpCS {
    val VariableCS[*] variables;
  }

  class PrimitiveLiteralExpCS extends LiteralExpCS {
    attr String symbol;
  }

  class IntegerLiteralExpCS extends PrimitiveLiteralExpCS {
    attr Integer integerSymbol;

    @GenModel(suppressedGetVisibility="true")
    readonly attr Long extendedIntegerSymbol = "0";
    volatile transient derived attr Long longSymbol;
  }

  class UnlimitedNaturalLiteralExpCS extends PrimitiveLiteralExpCS {
    attr Integer integerSymbol;

    @GenModel(suppressedGetVisibility="true")
    readonly attr Long extendedIntegerSymbol = "0";
    volatile transient derived attr Long longSymbol;
  }

  class RealLiteralExpCS extends PrimitiveLiteralExpCS {
    attr Double realSymbol;
  }

  class StringLiteralExpCS extends PrimitiveLiteralExpCS {
    attr String stringSymbol;
    attr String unescapedStringSymbol;
  }

  class BooleanLiteralExpCS extends SimpleNameCS, PrimitiveLiteralExpCS {
    attr Boolean booleanSymbol;
  }

  class NullLiteralExpCS extends SimpleNameCS, LiteralExpCS {
  }

  class InvalidLiteralExpCS extends SimpleNameCS, LiteralExpCS {
  }

  class CollectionRangeCS extends CollectionLiteralPartCS {

    @ExtendedMetaData(name="lastOclExpressionCS")
    val OCLExpressionCS lastExpressionCS;
  }

  class CallExpCS extends OCLExpressionCS {
    val OCLExpressionCS source;
    attr DotOrArrowEnum accessor;
    val SimpleNameCS simpleNameCS;
  }

  enum DotOrArrowEnum {
    none = 1;
    dot = 2;
    arrow = 3;
  }

  class LoopExpCS extends CallExpCS {
    val VariableCS variable1;
    val VariableCS variable2;
    val OCLExpressionCS body;
  }

  class IteratorExpCS extends LoopExpCS {
  }

  class IterateExpCS extends LoopExpCS {
  }

  class FeatureCallExpCS extends CallExpCS {
    val PathNameCS pathNameCS;
    val OCLExpressionCS[*] arguments;
    val IsMarkedPreCS isMarkedPreCS;
  }

  class OperationCallExpCS extends FeatureCallExpCS {
    attr Boolean isAtomic = "false";
  }

  class OCLDocumentCS extends CSTNode {
    !ordered val PackageDeclarationCS[*] packageDeclarations;
  }

}

